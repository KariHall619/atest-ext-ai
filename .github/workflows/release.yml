name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  GO_VERSION: 1.22
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Create GitHub release with binaries
  release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      tag_name: ${{ steps.get_version.outputs.tag_name }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version
      id: get_version
      run: |
        echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Generate changelog
      run: |
        # Generate changelog from git commits
        echo "# Changelog" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "## ${{ steps.get_version.outputs.tag_name }}" >> CHANGELOG.md
        echo "" >> CHANGELOG.md

        # Get commits since last tag
        PREV_TAG=$(git tag --sort=-version:refname | sed -n '2p')
        if [ -z "$PREV_TAG" ]; then
          git log --pretty=format:"- %s" >> CHANGELOG.md
        else
          git log ${PREV_TAG}..${{ steps.get_version.outputs.tag_name }} --pretty=format:"- %s" >> CHANGELOG.md
        fi

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.tag_name }}
        release_name: Release ${{ steps.get_version.outputs.tag_name }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: ${{ contains(steps.get_version.outputs.tag_name, 'rc') || contains(steps.get_version.outputs.tag_name, 'beta') || contains(steps.get_version.outputs.tag_name, 'alpha') }}

  # Build and upload binaries for all platforms
  build-binaries:
    name: Build Binaries
    runs-on: ubuntu-latest
    needs: release
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            suffix: linux-amd64
          - goos: linux
            goarch: arm64
            suffix: linux-arm64
          - goos: darwin
            goarch: amd64
            suffix: darwin-amd64
          - goos: darwin
            goarch: arm64
            suffix: darwin-arm64
          - goos: windows
            goarch: amd64
            suffix: windows-amd64.exe
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

    - name: Install dependencies
      run: make deps

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        mkdir -p dist
        go build \
          -ldflags "-s -w -X main.version=${{ needs.release.outputs.version }} -X main.gitCommit=${{ github.sha }} -X main.buildDate=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
          -o dist/atest-ext-ai-${{ matrix.suffix }} \
          ./cmd/atest-ext-ai

    - name: Create archive
      run: |
        cd dist
        if [[ "${{ matrix.goos }}" == "windows" ]]; then
          zip -r atest-ext-ai-${{ matrix.suffix }}.zip atest-ext-ai-${{ matrix.suffix }}
        else
          tar -czf atest-ext-ai-${{ matrix.suffix }}.tar.gz atest-ext-ai-${{ matrix.suffix }}
        fi

    - name: Upload binary archive
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.release.outputs.upload_url }}
        asset_path: ./dist/atest-ext-ai-${{ matrix.suffix }}${{ matrix.goos == 'windows' && '.zip' || '.tar.gz' }}
        asset_name: atest-ext-ai-${{ matrix.suffix }}${{ matrix.goos == 'windows' && '.zip' || '.tar.gz' }}
        asset_content_type: application/octet-stream

    - name: Upload raw binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.release.outputs.upload_url }}
        asset_path: ./dist/atest-ext-ai-${{ matrix.suffix }}
        asset_name: atest-ext-ai-${{ matrix.suffix }}
        asset_content_type: application/octet-stream

  # Build and push Docker image with release tags
  docker-release:
    name: Release Docker Images
    runs-on: ubuntu-latest
    needs: release
    permissions:
      contents: read
      packages: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ needs.release.outputs.version }}
          GIT_COMMIT=${{ github.sha }}
          BUILD_DATE=${{ github.event.head_commit.timestamp }}

  # Generate and upload checksums
  checksums:
    name: Generate Checksums
    runs-on: ubuntu-latest
    needs: [release, build-binaries]
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Generate checksums
      run: |
        find . -name "atest-ext-ai-*" -type f -exec sha256sum {} \; > SHA256SUMS
        find . -name "atest-ext-ai-*" -type f -exec md5sum {} \; > MD5SUMS

    - name: Upload SHA256 checksums
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.release.outputs.upload_url }}
        asset_path: ./SHA256SUMS
        asset_name: SHA256SUMS
        asset_content_type: text/plain

    - name: Upload MD5 checksums
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.release.outputs.upload_url }}
        asset_path: ./MD5SUMS
        asset_name: MD5SUMS
        asset_content_type: text/plain

  # Deploy to staging environment (optional)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [release, docker-release]
    if: contains(github.ref, 'rc') == false
    environment: staging
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Kubernetes
      run: |
        echo "Deploying ${{ needs.release.outputs.tag_name }} to staging"
        # Add your Kubernetes deployment commands here
        # kubectl apply -f k8s/ --namespace=atest-staging
        # kubectl set image deployment/atest-ai-plugin atest-ai-plugin=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.release.outputs.version }} --namespace=atest-staging

  # Notify on release completion
  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [release, build-binaries, docker-release, checksums]
    if: always()
    steps:
    - name: Notify success
      if: needs.build-binaries.result == 'success' && needs.docker-release.result == 'success'
      run: |
        echo "✅ Release ${{ needs.release.outputs.tag_name }} completed successfully!"
        # Add notification to Slack, Discord, or other services here

    - name: Notify failure
      if: needs.build-binaries.result == 'failure' || needs.docker-release.result == 'failure'
      run: |
        echo "❌ Release ${{ needs.release.outputs.tag_name }} failed!"
        # Add failure notification here