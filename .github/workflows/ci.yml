name: CI Pipeline

on:
  push:
    branches: [ main, master, develop, 'feature/**' ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master, develop ]

env:
  GO_VERSION: 1.24
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code quality and security checks
  quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: make deps

    - name: Format check
      run: |
        make fmt
        if [ -n "$(git status --porcelain)" ]; then
          echo "Code is not formatted properly"
          git diff
          exit 1
        fi

    - name: Lint
      uses: golangci/golangci-lint-action@v4
      with:
        version: latest
        args: --timeout=10m

    - name: Security check with gosec
      run: |
        # Install gosec
        go install github.com/securego/gosec/v2/cmd/gosec@latest

        # Run gosec (allow it to fail)
        echo "Running gosec security scan..."
        gosec ./... || true

        echo "Gosec scan completed"

    - name: Verify Go modules
      run: make mod-verify

  # Comprehensive testing
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: quality
    strategy:
      matrix:
        go-version: [1.23, 1.24]
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpass
          MYSQL_DATABASE: testdb
          MYSQL_USER: testuser
          MYSQL_PASSWORD: testpass
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        ports:
          - 3306:3306

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go ${{ matrix.go-version }}
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}

    - name: Install dependencies
      run: make deps

    - name: Run unit tests
      run: make test
      env:
        POSTGRES_URL: postgres://testuser:testpass@localhost:5432/testdb?sslmode=disable
        MYSQL_URL: testuser:testpass@tcp(localhost:3306)/testdb
        REDIS_URL: redis://localhost:6379

    - name: Run integration tests
      run: make test-integration
      env:
        POSTGRES_URL: postgres://testuser:testpass@localhost:5432/testdb?sslmode=disable
        MYSQL_URL: testuser:testpass@tcp(localhost:3306)/testdb
        REDIS_URL: redis://localhost:6379
        AI_PROVIDER: mock

    - name: Run benchmarks
      run: make benchmark

    - name: Upload coverage to Codecov
      if: matrix.go-version == '1.24'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  # Multi-platform build
  build:
    name: Multi-platform Build
    runs-on: ubuntu-latest
    needs: [quality, test]
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

    - name: Install dependencies
      run: make deps

    - name: Build binary
      run: |
        mkdir -p dist
        GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} \
        CGO_ENABLED=0 go build -ldflags "-s -w -X main.version=${{ github.ref_name }}" \
        -o dist/atest-ext-ai-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }} \
        ./cmd/atest-ext-ai

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binary-${{ matrix.goos }}-${{ matrix.goarch }}
        path: dist/*
        retention-days: 7

  # Docker image build and push
  docker:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [quality, test]
    permissions:
      contents: read
      packages: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Generate sanitized Docker tag
      id: docker-tag
      run: |
        # Debug: Show all available variables
        echo "DEBUG: github.event_name=${{ github.event_name }}"
        echo "DEBUG: github.ref_name=${{ github.ref_name }}"
        echo "DEBUG: github.head_ref=${{ github.head_ref }}"
        echo "DEBUG: github.event.number=${{ github.event.number }}"

        # Sanitize branch/PR name for Docker tag compatibility
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          RAW_REF="pr-${{ github.event.number }}"
        else
          # Use github.head_ref for PRs, github.ref_name for branches
          RAW_REF="${{ github.head_ref || github.ref_name }}"
        fi

        echo "DEBUG: RAW_REF=$RAW_REF"

        # Clean tag: replace invalid chars with -, remove leading/trailing -
        CLEAN_TAG=$(echo "$RAW_REF" | sed 's/[^a-zA-Z0-9_.-]/-/g' | sed 's/^-\+//' | sed 's/-\+$//')

        echo "DEBUG: After sed cleaning=$CLEAN_TAG"

        # Ensure tag is not empty, not just dashes, and has reasonable length
        if [ -z "$CLEAN_TAG" ] || [ "$CLEAN_TAG" = "-" ] || [ ${#CLEAN_TAG} -lt 2 ]; then
          CLEAN_TAG="latest"
          echo "DEBUG: Using fallback tag=latest"
        fi

        # Set outputs
        echo "tag=$CLEAN_TAG" >> $GITHUB_OUTPUT
        echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$CLEAN_TAG" >> $GITHUB_OUTPUT

        echo "Generated Docker tag: $CLEAN_TAG"

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=${{ steps.docker-tag.outputs.tag }}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ github.sha }}
          BUILD_DATE=${{ github.event.head_commit.timestamp }}

  # Integration with external services
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: docker
    if: github.event_name != 'pull_request'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Clean up any existing containers
      run: |
        docker compose -f docker-compose.yml -f docker-compose.dev.yml down -v || true
        docker system prune -f || true

    - name: Set up Docker Compose
      run: |
        # Set memory limits for CI environment
        export COMPOSE_MEMORY_LIMIT=512m
        docker compose -f docker-compose.yml -f docker-compose.dev.yml up -d
        sleep 30

    - name: Run integration tests
      run: |
        docker compose exec -T atest-ai-plugin-dev go test -v -tags=integration ./test/integration/...
      env:
        AI_API_KEY: mock-api-key-for-testing
        AI_PROVIDER: mock

    - name: Cleanup
      if: always()
      run: docker compose down -v

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.event_name != 'pull_request' && needs.docker.result == 'success'
    outputs:
      image-tag: ${{ steps.get-image-tag.outputs.tag }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate sanitized Docker tag for scanning
      id: docker-tag
      run: |
        # Use same sanitization logic as docker job
        echo "DEBUG Security: github.event_name=${{ github.event_name }}"
        echo "DEBUG Security: github.ref_name=${{ github.ref_name }}"
        echo "DEBUG Security: github.head_ref=${{ github.head_ref }}"

        if [ "${{ github.event_name }}" = "pull_request" ]; then
          RAW_REF="pr-${{ github.event.number }}"
        else
          RAW_REF="${{ github.head_ref || github.ref_name }}"
        fi

        echo "DEBUG Security: RAW_REF=$RAW_REF"

        # Clean tag: replace invalid chars with -, remove leading/trailing -
        CLEAN_TAG=$(echo "$RAW_REF" | sed 's/[^a-zA-Z0-9_.-]/-/g' | sed 's/^-\+//' | sed 's/-\+$//')

        echo "DEBUG Security: After sed cleaning=$CLEAN_TAG"

        # Ensure tag is not empty, not just dashes, and has reasonable length
        if [ -z "$CLEAN_TAG" ] || [ "$CLEAN_TAG" = "-" ] || [ ${#CLEAN_TAG} -lt 2 ]; then
          CLEAN_TAG="latest"
          echo "DEBUG Security: Using fallback tag=latest"
        fi

        IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$CLEAN_TAG"
        echo "image=$IMAGE" >> $GITHUB_OUTPUT
        echo "Scanning Docker image: $IMAGE"

    - name: Wait for image availability and verify
      run: |
        IMAGE="${{ steps.docker-tag.outputs.image }}"
        echo "Waiting for image: $IMAGE"

        # Wait up to 2 minutes for the image to be available
        for i in {1..12}; do
          echo "Attempt $i: Checking if image exists..."
          if docker manifest inspect "$IMAGE" >/dev/null 2>&1; then
            echo "✅ Image found: $IMAGE"
            echo "image_exists=true" >> $GITHUB_ENV
            break
          fi

          if [ $i -eq 12 ]; then
            echo "⚠️ Image not found after 2 minutes: $IMAGE"
            echo "image_exists=false" >> $GITHUB_ENV
            echo "Possible reasons:"
            echo "1. Docker build job failed"
            echo "2. Image push was skipped"
            echo "3. Registry propagation delay"
            echo ""
            echo "Skipping Trivy scan for this run."
            exit 0  # Exit gracefully instead of failing
          fi

          echo "Waiting 10 seconds before next check..."
          sleep 10
        done

    - name: Run Trivy vulnerability scanner
      if: env.image_exists == 'true'
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.docker-tag.outputs.image }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      if: env.image_exists == 'true' && always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'